.TH expr 3 2023-03-05 "version v3.0.0" expr

.SH NAME
expr \- a variable environment manipulation expression parser written in C++20 with flex and bison.

.SH DESCRIPTION
The \fBexpr\fR language syntax consists of expressions and assignments. \fBexpr\fR accepts and produces maps of symbols
called \fBsymbol tables\fR. These tables map symbol identifiers to their value and can be merged together or analysed.

A simple example \fBexpr\fR program could be:

.in +.5i
.ll -.5i
a := 0 * 5 ;
.br
b := 1 ;
.ll
.in

This would result in a symbol table mapping the variable \fIa\fR to the integer \fI0\fR and variable \fIb\fR to the
integer \fI1\fR. \fBexpr\fR assignment expressions, like the example above, consists of two segments: a right-hand side
containing the symbol identifier and a left-hand side that can contain complex arithmetic.
Most \fBexpr\fR drivers can be born with a symbol table as a lookup table for variable references in the right-hand
side part of the expression. A slightly more complex \fBexpr\fR program could be (the symbol table containing the
\fIa\fR and \fIb\fR variables is provided as a lookup environment):

.in +.5i
.ll -.5i
x := (a + b) ;
.br
y := 33 % (b * 2) ;
.ll
.in

Since \fIa\fR maps to \fI0\fR and \fIb\fR maps to \fI1\fR, this example would result in a symbol table mapping the
variables \fIx\fR to \fI1\fR (0 + 1 = 1) and \fIy\fR to \fI1\fR (33 modulo (1 times 2) = 1). Take careful note that the
resulting symbol table of this program does \fBnot\fR include the variables \fIa\fR and \fIb\fR.

.SH USE CASES
.B expr
provides the facilities for some slightly different use cases:
\fIcompilation\fR, \fIevaluation\fR and \fIsat check\fR with Z3 sat solver.
When \fIcompiling\fR, you can compile a string, or list of strings into a binary format based on
an abstract syntax tree (AST) structure.
When \fIevaluating\fR, you feed the AST format into the provided \fBevaluator\fR class and it returns a symbol table.
Note that symbol tables can be "combined" with eachother, so a symbol table can be interpreted as either a specific
state of symbols and values, or a "difference" from some other state. You can combine tables with the \fB+-operator\fR, 
or the provided \fBput\fR method. 

When \fIsat solving\fR, you can use the Z3 sat solver to check if a provided expression
string (must be a boolean expression) is satisfiable, and then generate a symbol table that contains
the variable assignments required to force the expression to \fRtrue\fR.

Note that the \fIz3\fR functionality might not be available if not explicitly told to be compiled with the rest of the library.

.SH AUTHOR
Asger Gitz\-Johansen <asger.gitz@hotmail.com>.

.SH COPYRIGHT
THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

.SH SEE ALSO

