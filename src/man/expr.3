.TH expr 3 2022-10-11 "version v2.1.0" expr

.SH NAME
expr \- a variable environment manipulation expression parser written in C++20 with flex and bison.

.SH DESCRIPTION
The \fBexpr\fR language syntax consists of expressions and assignments. \fBexpr\fR accepts and produces maps of symbols
called \fBsymbol tables\fR. These tables map symbol identifiers to their value and can be merged together or analysed.

A simple example \fBexpr\fR program could be:

.in +.5i
.ll -.5i
a := 0 * 5 ;
.br
b := 1 ;
.ll
.in

This would result in a symbol table mapping the variable \fIa\fR to the integer \fI0\fR and variable \fIb\fR to the
integer \fI1\fR. \fBexpr\fR assignment expressions, like the example above, consists of two segments: a right-hand side
containing the symbol identifier and a left-hand side that can contain complex arithmetic.
Most \fBexpr\fR drivers can be born with a symbol table as a lookup table for variable references in the right-hand
side part of the expression. A slightly more complex \fBexpr\fR program could be (the symbol table containing the
\fIa\fR and \fIb\fR variables is provided as a lookup environment):

.in +.5i
.ll -.5i
x := (a + b) ;
.br
y := 33 % (b * 2) ;
.ll
.in

Since \fIa\fR maps to \fI0\fR and \fIb\fR maps to \fI1\fR, this example would result in a symbol table mapping the
variables \fIx\fR to \fI1\fR (0 + 1 = 1) and \fIy\fR to \fI1\fR (33 modulo (1 times 2) = 1). Take careful note that the
resulting symbol table of this program does \fBnot\fR include the variables \fIa\fR and \fIb\fR.

.SH DRIVERS
.B expr
provides a series of expression drivers with slightly different use cases:
\fIcompiler\fR, \fIinterpreter\fR, \fItree_interpreter\fR and \fIz3\fR.
The \fIcompiler\fR driver can compile a string, or list of strings into a binary format based on
an abstract syntax tree (AST) structure.
The \fIinterpreter\fR and \fItree_interpreter\fR drivers can accept either the binary AST format,
or an expression string and returns a modified \fBsymbol table\fR based on the interpreted expression.
The \fIz3\fR driver is a special driver, using the Z3 sat solver to check if the provided expression
string (must be a boolean expression) is satisfiable, and then generate a \fBsymbol table\fR that contains
the variable assignments required to force the expression to \fRtrue\fR.

Note that the \fIz3\fR driver might not be available if not explicitly told to be compiled with the rest of the library.

The \fItree_*\fR driver variants operate on trees of \fBsymbol tables\fR to provide scopes with variable shadowing.

.SH AUTHOR
Asger Gitz\-Johansen <asger.gitz@hotmail.com>.

.SH COPYRIGHT
THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

.SH SEE ALSO
expr_demo(1), aaltitoad(3)
